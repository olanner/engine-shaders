
#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_GOOGLE_include_directive : enable
#include "Shaders/rt_common.glsl"

layout(location = 0) rayPayloadEXT hitPayload payLoad;

void main()
{
    vec2 screenCoord = vec2(gl_LaunchIDEXT.xy) / vec2(gl_LaunchSizeEXT.xy);
    screenCoord.xy = screenCoord.xy * 2.0 - 1.0;
    screenCoord.y *= -1.0;

    vec4 origin    = GLOBALS.inverseView * vec4(0, 0, 0, 1);
    vec4 target    = GLOBALS.inverseProj * vec4(screenCoord.x, screenCoord.y, 1, 1);
    vec4 direction = GLOBALS.inverseView * vec4(normalize(target.xyz), 0);

    uint  rayFlags = gl_RayFlagsOpaqueEXT | gl_RayFlagsCullBackFacingTrianglesEXT;
    float tMin     = 0.001;
    float tMax     = 10000.0;

    vec3 color = vec3(0);
    for(int i = 0; i < 8; i++)     
    {
        traceRayEXT(
            topLevelAS[0],  // acceleration structure
            rayFlags,       // rayFlags
            0xFF,           // cullMask
            0,              // sbtRecordOffset
            0,              // sbtRecordStride
            0,              // missIndex
            origin.xyz,     // ray origin
            tMin,           // ray min range
            direction.xyz,  // ray direction
            tMax,           // ray max range
            0               // payload (location = 0)
        );
        color = payLoad.shadedValue;
        if (!payLoad.hit)
            break;
        if(bool(payLoad.roughness))
            break;
        origin.xyz = payLoad.worldPos + payLoad.normal * 0.001;
        direction.xyz = reflect(direction.xyz, payLoad.normal);
    }

    imageStore(storageImages[0], ivec2(gl_LaunchIDEXT.xy), vec4(color, 1.0));
}