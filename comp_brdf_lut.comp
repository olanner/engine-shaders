#version 460
#extension GL_GOOGLE_include_directive : enable
#include "Shaders/common.glsl"
#include "Shaders/pbr_functions.glsl"

layout(set = 0, SAMPLERS_SET;
layout(set = 1, IMAGES_2D_SET;
layout(set = 2, binding = 0, rgba32f) uniform image2D storageImage;
layout (local_size_x = 16, local_size_y = 16) in;

float GDFG(float NoV, float NoL, float a) {
    float a2 = a * a;
    float GGXL = NoV * sqrt((-NoL * a2 + NoL) * NoL + a2);
    float GGXV = NoL * sqrt((-NoV * a2 + NoV) * NoV + a2);
    return (2.0 * NoL) / (GGXV + GGXL);
}

vec2 DFG(float NoV, float a) {
    vec3 N = vec3(0.0, 0.0, 1.0);
    vec3 V;
    V.x = sqrt(1.0 - NoV*NoV);
    V.y = 0.0;
    V.z = NoV;

    vec2 r = vec2(0.0, 0.0);
    uint numSamples = 2048;
    for (uint i = 0; i < numSamples; i++) {
        vec2 Xi = hammersley2d(i, numSamples);
        vec3 H = importanceSample_GGX(Xi, a, N);
        vec3 L = 2.0 * dot(V, H) * H - V;

        float VoH = max(dot(V, H), 0.0);
        float NoL = max(L.z, 0);
        float NoH = max(H.z, 0);

        if (NoL > 0.0) {
            float G = GDFG(NoV, NoL, a);
            float Gv = (G * VoH) / NoH;
            float Fc = pow(1.0 - VoH, 5.0);
            r.x += Gv * (1.0 - Fc);
            r.y += Gv * Fc;
        }
    }
    return r * (1.0 / numSamples);
}

void main()
{
    ivec2 index = ivec2(gl_GlobalInvocationID.xy);
    float NoV = float(index.x + 0.5) / 512.0;
    float a = float(index.y + 0.5) / 512.0;

    ivec2 pixCoord = ivec2(index.x, 511 - index.y);

    vec2 DFGResult = vec2(0.0, 0.0);
    if(NoV > 0 || a > 0)
    {
        DFGResult = DFG(NoV, a);
    }

    vec4 color = vec4(DFGResult.x, DFGResult.y, 0.0, 1.0);
    imageStore(storageImage, pixCoord, color);
}
