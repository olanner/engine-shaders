
#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_GOOGLE_include_directive : enable
#include "Shaders/rt_common.glsl"
#include "Shaders/pbr_functions.glsl"

layout(location = 0) rayPayloadEXT hitPayload payload;

// Based on http://blog.selfshadow.com/publications/s2013-shading-course/karis/s2013_pbs_epic_slides.pdf
vec3 importanceSample_GGX(vec2 Xi, float roughness, vec3 normal) 
{
	// Maps a 2D point to a hemisphere with spread based on roughness
	float alpha = roughness * roughness;
	float phi = 2.0 * PI * Xi.x + random(normal.xz) * (HALF_PI * sin(roughness * HALF_PI));
	float cosTheta = sqrt((1.0 - Xi.y) / (1.0 + (alpha*alpha - 1.0) * Xi.y));
	float sinTheta = sqrt(1.0 - cosTheta * cosTheta);
	vec3 H = vec3(sinTheta * cos(phi), sinTheta * sin(phi), cosTheta);

	// Tangent space
	vec3 up = abs(normal.z) < 0.999 ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0);
	vec3 tangentX = normalize(cross(up, normal));
	vec3 tangentY = normalize(cross(normal, tangentX));

	// Convert to world Space
	return normalize(tangentX * H.x + tangentY * H.y + normal * H.z);
}

void main()
{
    vec2 screenCoord = vec2(gl_LaunchIDEXT.xy) / vec2(gl_LaunchSizeEXT.xy);
    screenCoord.xy = screenCoord.xy * 2.0 - 1.0;
    screenCoord.y *= -1.0;
    
    vec4 origin    = GLOBALS.inverseView * vec4(0, 0, 0, 1);

    vec4 target    = GLOBALS.inverseProj * vec4(screenCoord.x, screenCoord.y, 1, 1);
    vec3 viewDir = (GLOBALS.inverseView * vec4(normalize(target.xyz), 0)).xyz;

    float mipLevels = textureQueryLevels( samplerCube( IMAGE_CUBE[0], LINEAR_SAMPLER ));

    vec3 albedo = imageLoad(gBufferAlb, ivec2(gl_LaunchIDEXT.xy)).xyz;
    albedo = GammaToLinear(albedo);
    bool isVoid = !bool(imageLoad(gBufferAlb, ivec2(gl_LaunchIDEXT.xy)).w);
    if(isVoid)
    {
        vec4 color = 
            vec4( textureLod(samplerCube( IMAGE_CUBE[GLOBALS.skyboxID], LINEAR_SAMPLER ), viewDir, 0).xyz, 1 );
        imageStore(storageImages[0], ivec2(gl_LaunchIDEXT.xy), color);
        return;
    }

    vec3 worldPos = imageLoad(gBufferPos, ivec2(gl_LaunchIDEXT.xy)).xyz;
	vec3 V = normalize(GLOBALS.inverseView[3].xyz - worldPos);

    vec4 tangent = vec4(0);
    vec4 normal = tangent = imageLoad(gBufferNrm, ivec2(gl_LaunchIDEXT.xy));
    normal.zw = vec2(0);
    tangent.xy = tangent.zw;
    tangent.zw = vec2(0);

    vec3 N = normalize(decode(normal, V));
    vec3 T = normalize(decode(tangent, V));
	vec3 R = reflect(-V, N); 

    vec4 material = imageLoad(gBufferMat, ivec2(gl_LaunchIDEXT.xy));
	float metallic = material.y;
	float roughness = material.x;

    uint numSamples = uint(750 * sin(roughness * HALF_PI));//uint(16.0 * roughness);
    numSamples = max(1, numSamples);
    //numSamples = numSamples * uint(roughness < 0.9);
    //numSamples = 2000;
    vec3 colorR = vec3(0);
    float weight = 0;
    for(int i = 0; i < numSamples; i++)     
    {
        vec3 specV = R;
        vec3 specN = R;
        vec2 Xi = hammersley2d(i, numSamples);
		vec3 H = importanceSample_GGX(Xi, roughness, specN);
		vec3 L = 2.0 * dot(specV, H) * H - specV;
		float dotNL = clamp(dot(specN, L), 0.0, 1.0);

        float dotNH = clamp(dot(specN, H), 0.0, 1.0);
        float dotVH = clamp(dot(specV, H), 0.0, 1.0);
        float dotNV = clamp(dot(specN, specV), 0.0, 1.0);
		float pdf = D_GGX(dotNH, roughness) * dotNH / (4.0 * dotVH) + 0.0001;
        float G = G_SchlicksmithGGX(dotNL, dotNV, roughness);

        traceRayEXT(
            topLevelAS[0],                                 // acceleration structure
            gl_RayFlagsOpaqueEXT 
            | gl_RayFlagsCullBackFacingTrianglesEXT,       // rayFlags
            0xFF,                                          // cullMask
            0,                                             // sbtRecordOffset
            0,                                             // sbtRecordStride
            0,                                             // missIndex
            worldPos.xyz,                                  // ray origin
            0.1,                                        // ray min range
            L,                                         // ray direction
            10000.0,                                          // ray max range
            0                                              // payload (location = 0)
        );
        colorR += payload.shadedValue * dotNL;
        weight += dotNL;
    }
    colorR.xyz = (colorR.xyz / weight);

	vec2 brdf = 
        textureLod( sampler2DArray(IMAGE_2D[0], NEAREST_SAMPLER), vec3(max(dot(N, V), 0.0), roughness, 0), 0).rg;
    vec3 reflection = 
        GammaToLinear( textureLod( samplerCube( IMAGE_CUBE[GLOBALS.skyboxID], LINEAR_SAMPLER ), R, (mipLevels - 1) * roughness ).xyz );
	vec3 irradiance = 
        GammaToLinear( textureLod( samplerCube( IMAGE_CUBE[GLOBALS.skyboxID], LINEAR_SAMPLER ), N.xyz, mipLevels - 1 ).xyz ); // MAJOR DIFF B

	// Diffuse based on irradiance
	vec3 diffuse = irradiance * albedo;	

	vec3 F0 = vec3(0.04); 
	F0 = mix(F0, albedo, metallic);
	vec3 F = max( F_SchlickR(max(dot(N, V), 0.0), F0, roughness), 0 );

	// Specular reflectance
	vec3 specular = colorR * (F * brdf.x + brdf.y );

	// Ambient part
	vec3 kD = 1.0 - F;
	kD *= 1.0 - metallic;	  
	vec3 ambient = (kD * diffuse + specular);
	
	vec3 color = ambient;

	// Gamma correction
    //color = ACESFilm(color);
	color = LinearToGamma(color);
    
    imageStore(storageImages[0], ivec2(gl_LaunchIDEXT.xy), vec4(color, 1.0));
}